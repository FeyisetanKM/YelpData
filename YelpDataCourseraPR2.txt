Data Scientist Role Play: Profiling and Analyzing the Yelp Dataset Coursera Worksheet

This is a 2-part assignment. In the first part, you are asked a series of questions that will help you profile and understand the data just like a data scientist would. For this first part of the assignment, you will be assessed both on the correctness of your findings, as well as the code you used to arrive at your answer. You will be graded on how easy your code is to read, so remember to use proper formatting and comments where necessary.

In the second part of the assignment, you are asked to come up with your own inferences and analysis of the data for a particular research question you want to answer. You will be required to prepare the dataset for the analysis you choose to do. As with the first part, you will be graded, in part, on how easy your code is to read, so use proper formatting and comments to illustrate and communicate your intent as required.

For both parts of this assignment, use this "worksheet." It provides all the questions you are being asked, and your job will be to transfer your answers and SQL coding where indicated into this worksheet so that your peers can review your work. You should be able to use any Text Editor (Windows Notepad, Apple TextEdit, Notepad ++, Sublime Text, etc.) to copy and paste your answers. If you are going to use Word or some other page layout application, just be careful to make sure your answers and code are lined appropriately.
In this case, you may want to save as a PDF to ensure your formatting remains intact for you reviewer.



Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:
	
i. Attribute table = 10,000

SELECT COUNT(*) from attribute             

+----------+
| COUNT(*) |
+----------+
|    10000 |
+----------+

ii. Business table = 10,000

SELECT COUNT(*) from business           

+----------+
| COUNT(*) |
+----------+
|    10000 |
+----------+

iii. Category table = 10,000


SELECT COUNT(*) from category          
Reset
+----------+
| COUNT(*) |
+----------+
|    10000 |
+----------


iv. Checkin table = 10,000

SELECT COUNT(*) from checkin         
Reset
+----------+
| COUNT(*) |
+----------+
|    10000 |
+---------


v. elite_years table =10,000

SELECT COUNT(*) from elite_years
Reset
+----------+
| COUNT(*) |
+----------+
|    10000 |
+----------+

vi. friend table = 10,000

SELECT COUNT(*) from friend
Reset
+----------+
| COUNT(*) |
+----------+
|    10000 |
+----------+

vii. hours table = 10,000

SELECT COUNT(*) from hours
Reset
+----------+
| COUNT(*) |
+----------+
|    10000 |
+----------+


viii. photo table = 10,000

SELECT COUNT(*) from photo
Reset
+----------+
| COUNT(*) |
+----------+
|    10000 |
+----------+

ix. review table = 10,000

SELECT COUNT(*) from review
Reset
+----------+
| COUNT(*) |
+----------+
|    10000 |
+----------+

x. tip table = 10,000

SELECT COUNT(*) from tip
Reset
+----------+
| COUNT(*) |
+----------+
|    10000 |
+----------+

xi. user table =10,000
	
SELECT COUNT(*) from user
Reset
+----------+
| COUNT(*) |
+----------+
|    10000 |
+----------+

2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.

i. Business =10,000

SELECT COUNT(DISTINCT(id)) from business
Reset
+---------------------+
| COUNT(DISTINCT(id)) |
+---------------------+
|               10000 |
+---------------------+

ii. Hours = 1,562

SELECT COUNT(DISTINCT(business_id)) from hours
Reset
+------------------------------+
| COUNT(DISTINCT(business_id)) |
+------------------------------+
|                         1562 |
+------------------------------+

iii. Category = 2,643

SELECT COUNT(DISTINCT(business_id)) from category
Reset
+------------------------------+
| COUNT(DISTINCT(business_id)) |
+------------------------------+
|                         2643 |
+------------------------------+

iv. Attribute = 1,115

SELECT COUNT(DISTINCT(business_id)) from attribute
Reset
+------------------------------+
| COUNT(DISTINCT(business_id)) |
+------------------------------+
|                         1115 |
+------------------------------+

v. Review = 10,000

SELECT COUNT(DISTINCT(id)) from review
Reset
+---------------------+
| COUNT(DISTINCT(id)) |
+---------------------+
|               10000 |
+---------------------+

vi. Checkin = 493

SELECT COUNT(DISTINCT(business_id)) from checkin
Reset
+------------------------------+
| COUNT(DISTINCT(business_id)) |
+------------------------------+
|                          493 |
+------------------------------+

vii. Photo = 10,000

SELECT COUNT(DISTINCT(id)) from photo
Reset
+---------------------+
| COUNT(DISTINCT(id)) |
+---------------------+
|               10000 |
+---------------------+

viii. Tip = 537

SELECT COUNT(DISTINCT(user_id)) from tip
Reset
+--------------------------+
| COUNT(DISTINCT(user_id)) |
+--------------------------+
|                      537 |
+--------------------------+

ix. User = 10,000

SELECT COUNT(DISTINCT(id)) from user
Reset
+---------------------+
| COUNT(DISTINCT(id)) |
+---------------------+
|               10000 |
+---------------------+

x. Friend = 11

SELECT COUNT(DISTINCT(user_id)) from friend
Reset
+--------------------------+
| COUNT(DISTINCT(user_id)) |
+--------------------------+
|                       11 |
+--------------------------+

xi. Elite_years = 2,780

SELECT COUNT(DISTINCT(user_id)) from elite_years
Reset
+--------------------------+
| COUNT(DISTINCT(user_id)) |
+--------------------------+
|                     2780 |
+--------------------------+

Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.	



3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	Answer: No
	
	
	SQL code used to arrive at answer:

SELECT COUNT(*) from user
WHERE id is NULL
Reset
+----------+
| COUNT(*) |
+----------+
|        0 |
+----------+
	
	

	
4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

	i. Table: Review, Column: Stars
	
		min:	1	max:	5	avg: 3.7082

SELECT min(stars), max(stars), avg(stars) from review
Reset
+------------+------------+------------+
| min(stars) | max(stars) | avg(stars) |
+------------+------------+------------+
|          1 |          5 |     3.7082 |
+------------+------------+------------+
		
	
	ii. Table: Business, Column: Stars
	
		min:	1.0	max:	5.0	avg: 3.6549

SELECT min(stars), max(stars), avg(stars) from business
Reset
+------------+------------+------------+
| min(stars) | max(stars) | avg(stars) |
+------------+------------+------------+
|        1.0 |        5.0 |     3.6549 |
+------------+------------+------------+
		
	
	iii. Table: Tip, Column: Likes
	
		min:	0	max:	2	avg:	0.0144

SELECT min(likes), max(likes), avg(likes) from tip
Reset
+------------+------------+------------+
| min(likes) | max(likes) | avg(likes) |
+------------+------------+------------+
|          0 |          2 |     0.0144 |
+------------+------------+------------+
		
	
	iv. Table: Checkin, Column: Count
	
		min:	1	max:	53	avg:	1.9414

SELECT min(count), max(count), avg(count) from checkin
Reset
+------------+------------+------------+
| min(count) | max(count) | avg(count) |
+------------+------------+------------+
|          1 |         53 |     1.9414 |
+------------+------------+------------+
		
	
	v. Table: User, Column: Review_count
	
		min:	0	max:	2,000	avg:	24.2995

SELECT min(review_count), max(review_count), avg(review_count) from user
Reset
+-------------------+-------------------+-------------------+
| min(review_count) | max(review_count) | avg(review_count) |
+-------------------+-------------------+-------------------+
|                 0 |              2000 |           24.2995 |
+-------------------+-------------------+-------------------+
		


5. List the cities with the most reviews in descending order:

	SQL code used to arrive at answer:
SELECT city, sum(review_count) as reviews
FROM business
GROUP BY city
ORDER BY SUM(review_count) DESC
	
	
	Copy and Paste the Result Below:
+-----------------+---------+
| city            | reviews |
+-----------------+---------+
| Las Vegas       |   82854 |
| Phoenix         |   34503 |
| Toronto         |   24113 |
| Scottsdale      |   20614 |
| Charlotte       |   12523 |
| Henderson       |   10871 |
| Tempe           |   10504 |
| Pittsburgh      |    9798 |
| Montréal        |    9448 |
| Chandler        |    8112 |
| Mesa            |    6875 |
| Gilbert         |    6380 |
| Cleveland       |    5593 |
| Madison         |    5265 |
| Glendale        |    4406 |
| Mississauga     |    3814 |
| Edinburgh       |    2792 |
| Peoria          |    2624 |
| North Las Vegas |    2438 |
| Markham         |    2352 |
| Champaign       |    2029 |
| Stuttgart       |    1849 |
| Surprise        |    1520 |
| Lakewood        |    1465 |
| Goodyear        |    1155 |
+-----------------+---------+
(Output limit exceeded, 25 of 362 total rows shown)
	

	
6. Find the distribution of star ratings to the business in the following cities:

i. Avon

SQL code used to arrive at answer:

SELECT stars, COUNT(stars) AS num_stars
FROM business
WHERE city = 'Avon'
GROUP BY stars
 


Copy and Paste the Resulting Table Below (2 columns – star rating and count):

+-------+-----------+
| stars | num_stars |
+-------+-----------+
|   1.5 |         1 |
|   2.5 |         2 |
|   3.5 |         3 |
|   4.0 |         2 |
|   4.5 |         1 |
|   5.0 |         1 |
+-------+-----------+


ii. Beachwood

SQL code used to arrive at answer:

SELECT stars, COUNT(stars) AS num_stars
FROM business
WHERE city = 'Beachwood'
GROUP BY stars
 

Copy and Paste the Resulting Table Below (2 columns – star rating and count):

+-------+-----------+
| stars | num_stars |
+-------+-----------+
|   2.0 |         1 |
|   2.5 |         1 |
|   3.0 |         2 |
|   3.5 |         2 |
|   4.0 |         1 |
|   4.5 |         2 |
|   5.0 |         5 |
+-------+-----------+
		


7. Find the top 3 users based on their total number of reviews:
		
	SQL code used to arrive at answer:
	
SELECT name, SUM(review_count) AS num_reviews
FROM user
GROUP BY name
ORDER BY SUM(review_count) DESC
LIMIT 3;
		
	Copy and Paste the Result Below:

+--------+-------------+
| name   | num_reviews |
+--------+-------------+
| Nicole |        2397 |
| Sara   |        2253 |
| Gerald |        2034 |
+--------+-------------+

		


8. Does posing more reviews correlate with more fans? No

	Please explain your findings and interpretation of the results:

The result shows that the number of fans is not directly proportional to the number of reviews. For instance, Gerald had the highest review count but not the highest number of fans.

SELECT name, review_count, fans
FROM user
ORDER BY review_count DESC
 

+-----------+--------------+------+
| name      | review_count | fans |
+-----------+--------------+------+
| Gerald    |         2000 |  253 |
| Sara      |         1629 |   50 |
| Yuri      |         1339 |   76 |
| .Hon      |         1246 |  101 |
| William   |         1215 |  126 |
| Harald    |         1153 |  311 |
| eric      |         1116 |   16 |
| Roanna    |         1039 |  104 |
| Mimi      |          968 |  497 |
| Christine |          930 |  173 |
| Ed        |          904 |   38 |
| Nicole    |          864 |   43 |
| Fran      |          862 |  124 |
| Mark      |          861 |  115 |
| Christina |          842 |   85 |
| Dominic   |          836 |   37 |
| Lissa     |          834 |  120 |
| Lisa      |          813 |  159 |
| Alison    |          775 |   61 |
| Sui       |          754 |   78 |
| Tim       |          702 |   35 |
| L         |          696 |   10 |
| Angela    |          694 |  101 |
| Crissy    |          676 |   25 |
| Lyn       |          675 |   45 |
+-----------+--------------+------+
(Output limit exceeded, 25 of 10000 total rows show

	
9. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer:
 There are more reviews with the word 'love' than with 'hate'
+--------+
| counts |
+--------+
|    232 |
|   1780 |
+--------+
	
	SQL code used to arrive at answer:
SELECT COUNT(text) AS counts
FROM review
WHERE text like "%hate%" 
UNION  
SELECT COUNT(text)
FROM review
WHERE text like "%love%"

	
	
10. Find the top 10 users with the most fans:

	SQL code used to arrive at answer:
	

SELECT name, SUM(fans)
FROM user
GROUP BY name
ORDER BY SUM(fans) DESC
limit 10;

	Copy and Paste the Result Below:

+-----------+-----------+
| name      | SUM(fans) |
+-----------+-----------+
| Amy       |       519 |
| Mimi      |       498 |
| Harald    |       311 |
| Gerald    |       256 |
| Lisa      |       207 |
| Nicole    |       200 |
| Christine |       187 |
| Mark      |       156 |
| Jen       |       148 |
| Linda     |       148 |
+-----------+-----------+
	
		

Part 2: Inferences and Analysis

1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.


	
i. Do the two groups you chose to analyze have a different distribution of hours? 

Yes, they do.
4-5 stars have 11:00-18:00 and 11:00-22:00 while 2-3 stars have 9:00-2:00 and 5:00-0:00


ii. Do the two groups you chose to analyze have a different number of reviews?

Yes, they do.
4-5 stars have a total of 3,066 reviews while 2-3 stars have 476 reviews.
         
         
iii. Are you able to infer anything from the location data provided between these two groups? Explain.
No. the postal codes are different.

SQL code used for analysis:
SELECT 
    b.city, 
    c.category, 
    b.name, 
    h.hours, 
    b.postal_code,
    CASE
        WHEN stars BETWEEN 2 and 3 THEN '2-3 stars'
        WHEN stars BETWEEN 4 and 5 THEN '4-5 stars'
    END AS rating,
    SUM(b.review_count) AS reviews
FROM business b
JOIN hours h on b.id = h.business_id
JOIN category c on c.business_id = b.id
WHERE city = 'Phoenix' and category = 'Restaurants'
GROUP BY name
ORDER BY stars DESC;

+---------+-------------+----------------------------------------+----------------------+-------------+-----------+---------+
| city    | category    | name                                   | hours                | postal_code | rating    | reviews |
+---------+-------------+----------------------------------------+----------------------+-------------+-----------+---------+
| Phoenix | Restaurants | Charlie D's Catfish & Chicken          | Saturday|11:00-18:00 | 85034       | 4-5 stars |      49 |
| Phoenix | Restaurants | Bootleggers Modern American Smokehouse | Saturday|11:00-22:00 | 85028       | 4-5 stars |    3017 |
| Phoenix | Restaurants | Five Guys                              | Saturday|10:00-22:00 | 85008       | None      |     441 |
| Phoenix | Restaurants | Gallagher's                            | Saturday|9:00-2:00   | 85024       | 2-3 stars |     420 |
| Phoenix | Restaurants | McDonald's                             | Saturday|5:00-0:00   | 85004       | 2-3 stars |      56 |
+---------+-------------+----------------------------------------+----------------------+-------------+-----------+---------+

		
		
2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones that are still open and the ones that are closed? List at least two differences and the SQL code you used to arrive at your answer.
		
i. Difference 1:

The number of reviews of open business is more than closed (31.76 // 23.20)

         
         
ii. Difference 2:
         
Open business outnumber closed business (8480:1520) 
         
SQL code used for analysis:

SELECT COUNT(DISTINCT id), avg(stars), avg(review_count), is_open
FROM business
GROUP BY is_open
ORDER BY review_count

+--------------------+-------------------+--------------------+---------+
| COUNT(DISTINCT id) |        avg(stars) |  avg(review_count) | is_open |
+--------------------+-------------------+--------------------+---------+
|               1520 | 3.520394736842105 | 23.198026315789473 |       0 |
|               8480 | 3.679009433962264 | 31.757075471698112 |       1 |
+--------------------+-------------------+--------------------+---------+

	
	
3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.

Ideas for analysis include: Parsing out keywords and business attributes for sentiment analysis, clustering businesses to find commonalities or anomalies between them, predicting the overall star rating for a business, predicting the number of fans a user will have, and so on. These are just a few examples to get you started, so feel free to be creative and come up with your own problem you want to solve. Provide answers, in-line, to all of the following:
	
i. Indicate the type of analysis you chose to do:

To see the connection between number of reviews (arranged in descending order) , useful, fans.
         
ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:

the id will be needed for the analysis as this will show the uniqueattribute in tthe review table.
the number of reviews is summed for each id.
the number of fans is summed for each id.
the number of useful is summed for each id.
the result of the data above is important in determining the id with most fans.
                
iii. Output of your finished dataset:

+------------------------+-------------------+-------------+-----------+
| id                     | sum(review_count) | sum(useful) | sum(fans) |
+------------------------+-------------------+-------------+-----------+
| -G7Zkl1wIWBBmD0KRy_sCw |              2000 |       17524 |       253 |
| -3s52C4zL_DHRK0ULG6qtg |              1629 |          25 |        50 |
| -8lbUNlXVSoXqaRRiHiSNg |              1339 |        1166 |        76 |
| -K2Tcgh2EKX6e6HqqIrBIQ |              1246 |        7850 |       101 |
| -FZBTkAZEXoP7CYvRV2ZwQ |              1215 |        9363 |       126 |
| --2vR0DIsmQ6WfcSzKWigw |              1153 |      122921 |       311 |
| -gokwePdbXjfS0iF7NsUGA |              1116 |           1 |        16 |
| -DFCC64NXgqrxlO8aLU5rg |              1039 |        2995 |       104 |
| -8EnCioUmDygAbsYZmTeRQ |               968 |         257 |       497 |
| -0IiMAZI2SsQ7VmyzJjokQ |               930 |        4834 |       173 |
| -fUARDNuXAfrOn4WLSZLgA |               904 |         141 |        38 |
| -hKniZN2OdshWLHYuj21jQ |               864 |          66 |        43 |
| -9da1xk7zgnnfO1uTVYGkA |               862 |        9851 |       124 |
| -B-QEUESGWHPE_889WJaeg |               861 |        4008 |       115 |
| -kLVfaJytOJY2-QdQoCcNQ |               842 |         158 |        85 |
| -kO6984fXByyZm3_6z2JYg |               836 |          81 |        37 |
| -lh59ko3dxChBSZ9U7LfUw |               834 |         455 |       120 |
| -g3XIcCb2b-BD0QBCcq2Sw |               813 |          48 |       159 |
| -l9giG8TSDBG1jnUBUXp5w |               775 |         300 |        61 |
| -dw8f7FLaUmWR7bfJ_Yf0w |               754 |           9 |        78 |
+------------------------+-------------------+-------------+-----------+
         
iv. Provide the SQL code you used to create your final dataset:
SELECT id, sum(review_count), sum(useful), sum(fans)
FROM user
GROUP BY id
ORDER BY SUM(review_count) DESC
LIMIT 20;